{"version":3,"sources":["App.js","inputDefaultText.js","index.js"],"names":["editorStyle","width","previewStyle","minHeight","fullsizeStyle","height","textAreaNoResize","resize","textAreaResize","fullSizeIcon","className","normalSizeIcon","Toolbar","props","title","onClick","buttonClick","buttonIcon","App","useState","inputText","setInputText","editorFullsize","setEditorFullsize","previewFullsize","setPreviewFullsize","id","style","hidden","onChange","e","target","value","handleChange","dangerouslySetInnerHTML","__html","marked","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAMMA,EAAc,CAClBC,MAAO,OAGHC,EAAe,CACnBD,MAAO,MACPE,UAAW,OAGPC,EAAgB,CACpBH,MAAO,MACPI,OAAQ,QAGJC,EAAmB,CACvBC,OAAQ,OACRF,OAAQ,QAGJG,EAAiB,CACrBD,OAAQ,YAGJE,EACJ,mBAAGC,UAAU,oBAGTC,EACJ,kCAGIC,EAAU,SAACC,GACf,OACE,sBAAKH,UAAU,UAAf,UACE,4BAAIG,EAAMC,QACV,wBAAQC,QAASF,EAAMG,YAAvB,SAAqCH,EAAMI,iBAmElCC,MA9Df,WAEE,MAAoCC,mBChDT,smCDgD3B,mBAAQC,EAAR,KAAmBC,EAAnB,KACA,EAA6CF,oBAAS,GAAtD,mBAAQG,EAAR,KAAwBC,EAAxB,KACA,EAA+CJ,oBAAS,GAAxD,mBAAQK,EAAR,KAAyBC,EAAzB,KAgBA,OACE,sBAAKf,UAAU,MAAf,UACE,sBACEgB,GAAG,iBACHC,MAAOL,EAAiBlB,EAAgBJ,EACxC4B,OAAQJ,EAHV,UAKE,cAAC,EAAD,CACEV,MAAM,SACNG,WAAYK,EAAiBX,EAAiBF,EAC9CO,YApBoB,WAC1BO,GAAmBD,GACnBG,GAAoBH,MAoBhB,0BACEI,GAAG,SACHhB,UAAU,SACVmB,SAAU,SAACC,GAAD,OA7BG,SAACA,GACpBT,EAAaS,EAAEC,OAAOC,OA4BCC,CAAaH,IAC9BE,MAAOZ,EACPO,MAAOL,EAAiBhB,EAAmBE,OAI/C,sBACEkB,GAAG,kBACHC,MAAOH,EAAkBpB,EAAgBF,EACzC0B,OAAQN,EAHV,UAKE,cAAC,EAAD,CACER,MAAM,UACNG,WAAYO,EAAkBb,EAAiBF,EAC/CO,YAlCqB,WAC3BS,GAAoBD,GACpBD,GAAmBC,MAkCf,qBACEE,GAAG,UACHhB,UAAU,SACVwB,wBAAyB,CAACC,OAAQC,IAAOhB,aE/FnDiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7ef6b062.chunk.js","sourcesContent":["\nimport React, { useState } from 'react'\nimport marked from 'marked'\n\nimport { inputDefaultText } from './inputDefaultText'\n\nconst editorStyle = {\n  width: '60%',\n}\n\nconst previewStyle = {\n  width: '80%',\n  minHeight: '60%'\n}\n\nconst fullsizeStyle = {\n  width: '98%',\n  height: '95vh',\n}\n\nconst textAreaNoResize = {\n  resize: 'none',\n  height: '100%'\n}\n\nconst textAreaResize = {\n  resize: 'vertical'\n}\n\nconst fullSizeIcon = (\n  <i className=\"icon-fullscreen\"></i>\n)\n\nconst normalSizeIcon = (\n  <p>-</p>\n)\n\nconst Toolbar = (props) => {\n  return (\n    <div className='toolbar'>\n      <p>{props.title}</p>\n      <button onClick={props.buttonClick}>{props.buttonIcon}</button>\n    </div>\n  )\n}\n\nfunction App() {\n\n  const [ inputText, setInputText ] = useState(inputDefaultText)\n  const [ editorFullsize, setEditorFullsize] = useState(false)\n  const [ previewFullsize, setPreviewFullsize] = useState(false)\n\n  const handleChange = (e) => {\n    setInputText(e.target.value)\n  }\n\n  const onEditorButtonClick = () => {\n    setEditorFullsize(!editorFullsize)\n    setPreviewFullsize(!editorFullsize)\n  }\n\n  const onPreviewButtonClick = () => {\n    setPreviewFullsize(!previewFullsize)\n    setEditorFullsize(!previewFullsize)\n  }\n\n  return (\n    <div className=\"App\">\n      <div\n        id='editor-wrapper'\n        style={editorFullsize ? fullsizeStyle : editorStyle}\n        hidden={previewFullsize}\n      >\n        <Toolbar\n          title='Editor'\n          buttonIcon={editorFullsize ? normalSizeIcon : fullSizeIcon}\n          buttonClick={onEditorButtonClick}\n        />\n        <textarea\n          id='editor'\n          className='window'\n          onChange={(e) => handleChange(e)}\n          value={inputText}\n          style={editorFullsize ? textAreaNoResize : textAreaResize}\n        >\n        </textarea>\n      </div>\n      <div\n        id='preview-wrapper'\n        style={previewFullsize ? fullsizeStyle : previewStyle}\n        hidden={editorFullsize}\n      >\n        <Toolbar\n          title='Preview'\n          buttonIcon={previewFullsize ? normalSizeIcon : fullSizeIcon}\n          buttonClick={onPreviewButtonClick}\n        />\n        <div\n          id='preview'\n          className='window'\n          dangerouslySetInnerHTML={{__html: marked(inputText)}}\n        >\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const inputDefaultText =\n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}